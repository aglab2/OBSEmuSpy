#pragma once

#include <stdint.h>

namespace MIPS {
enum Category {
	CATEGORY_IMM,
	CATEGORY_JUMP,
	CATEGORY_REG,
	CATEGORY_REGIMM,
};

enum Op {
	OP_SPECIAL = 0b000000,
	OP_REGIMM = 0b000001,
	OP_COP0 = 0b010000,
	OP_COP1 = 0b010000,
	OP_ADDI = 0b001000,
	OP_ADDIU = 0b001001,
	OP_ANDI = 0b001100,
	OP_BEQ = 0b000100,
	OP_BEQL = 0b010100,
	OP_BGTZ = 0b000111,
	OP_BGTZL = 0b010111,
	OP_BLEZ = 0b000110,
	OP_BLEZL = 0b010110,
	OP_BNE = 0b000101,
	OP_BNEL = 0b010101,
	OP_CACHE = 0b101111,
	OP_DADDI = 0b011000,
	OP_DADDIU = 0b011001,
	OP_J = 0b000010,
	OP_JAL = 0b000011,
	OP_LB = 0b100000,
	OP_LBU = 0b100100,
	OP_LD = 0b110111,
	OP_LDL = 0b011010,
	OP_LDR = 0b011011,
	OP_LH = 0b100001,
	OP_LHU = 0b100101,
	OP_LL = 0b110000,
	OP_LLD = 0b110100,
	OP_LUI = 0b001111,
	OP_LW = 0b100011,
	OP_LWL = 0b100010,
	OP_LWR = 0b100110,
	OP_LWU = 0b100111,
	OP_ORI = 0b001101,
	OP_SB = 0b101000,
	OP_SC = 0b111000,
	OP_SCD = 0b111100,
	OP_SD = 0b111111,
	OP_SDL = 0b101100,
	OP_SDR = 0b101101,
	OP_SH = 0b101001,
	OP_SLTI = 0b001010,
	OP_SLTIU = 0b001011,
	OP_SW = 0b101011,
	OP_SWL = 0b101010,
	OP_SWR = 0b101110,
	OP_XORI = 0b001110,
};

enum Funct {
	FUNCT_ADD = 0b100000,
	FUNCT_ADDU = 0b100001,
	FUNCT_AND = 0b100100,
	FUNCT_BREAK = 0b001101,
	FUNCT_DADD = 0b101100,
	FUNCT_DADDU = 0b101101,
	FUNCT_DDIV = 0b011110,
	FUNCT_DDIVU = 0b011111,
	FUNCT_DIV = 0b011010,
	FUNCT_DIVU = 0b011011,
	FUNCT_DMULT = 0b011100,
	FUNCT_DMULTU = 0b011101,
	FUNCT_DSLL = 0b111000,
	FUNCT_DSLL32 = 0b111100,
	FUNCT_DSLLV = 0b010100,
	FUNCT_DSRA = 0b111011,
	FUNCT_DSRA32 = 0b111111,
	FUNCT_DSRAV = 0b010111,
	FUNCT_DSRL = 0b111010,
	FUNCT_DSRL32 = 0b111110,
	FUNCT_DSRLV = 0b010110,
	FUNCT_DSUB = 0b101110,
	FUNCT_DSUBU = 0b101111,
	FUNCT_JALR = 0b001001,
	FUNCT_JR = 0b001000,
	FUNCT_MFHI = 0b010000,
	FUNCT_MFLO = 0b010010,
	FUNCT_MTHI = 0b010001,
	FUNCT_MTLO = 0b010011,
	FUNCT_MULT = 0b011000,
	FUNCT_MULTU = 0b011001,
	FUNCT_NOR = 0b100111,
	FUNCT_OR = 0b100101,
	FUNCT_SLL = 0b000000,
	FUNCT_SLLV = 0b000100,
	FUNCT_SLT = 0b101010,
	FUNCT_SLTU = 0b101011,
	FUNCT_SRA = 0b000011,
	FUNCT_SRAV = 0b000111,
	FUNCT_SRL = 0b000010,
	FUNCT_SRLV = 0b000110,
	FUNCT_SUB = 0b100010,
	FUNCT_SUBU = 0b100011,
	FUNCT_SYNC = 0b001111,
	FUNCT_SYSCALL = 0b001100,
	FUNCT_XOR = 0b100110,
};

enum FunctImm {
	FUNCT_IMM_BGEZ = 0b00001,
	FUNCT_IMM_BGEZAL = 0b10001,
	FUNCT_IMM_BGEZALL = 0b10011,
	FUNCT_IMM_BGEZL = 0b00011,
	FUNCT_IMM_BLTZ = 0b00000,
	FUNCT_IMM_BLTZAL = 0b10000,
	FUNCT_IMM_BLTZALL = 0b10010,
	FUNCT_IMM_BLTZL = 0b00010,
};

enum Cop {
	COP_MF = 0b00000,
	COP_MT = 0b00100,
};

enum Cmd {
	CMD_SLL = 0b10000000,
	CMD_REG = CMD_SLL,
	CMD_IMM = 0b01000000,
	CMD_BLTZ = CMD_IMM | CMD_REG,
	CMD_REGIMM = CMD_BLTZ,
	CMD_MFC0 = 0b0100000000,
	CMD_COP0 = CMD_MFC0,
	CMD_MFC1 = 0b1000000000,
	CMD_COP1 = CMD_MFC1,
	CMD_NOP = 0,
	CMD_ADDI = CMD_IMM | OP_ADDI,
	CMD_ADDIU = CMD_IMM | OP_ADDIU,
	CMD_ANDI = CMD_IMM | OP_ANDI,
	CMD_BEQ = CMD_IMM | OP_BEQ,
	CMD_BEQL = CMD_IMM | OP_BEQL,
	CMD_BGTZ = CMD_IMM | OP_BGTZ,
	CMD_BGTZL = CMD_IMM | OP_BGTZL,
	CMD_BLEZ = CMD_IMM | OP_BLEZ,
	CMD_BLEZL = CMD_IMM | OP_BLEZL,
	CMD_BNE = CMD_IMM | OP_BNE,
	CMD_BNEL = CMD_IMM | OP_BNEL,
	CMD_DADDI = CMD_IMM | OP_DADDI,
	CMD_DADDIU = CMD_IMM | OP_DADDIU,
	CMD_CACHE = CMD_IMM | OP_CACHE,
	CMD_J = CMD_IMM | OP_J,
	CMD_JAL = CMD_IMM | OP_JAL,
	CMD_LB = CMD_IMM | OP_LB,
	CMD_LBU = CMD_IMM | OP_LBU,
	CMD_LD = CMD_IMM | OP_LD,
	CMD_LDL = CMD_IMM | OP_LDL,
	CMD_LDR = CMD_IMM | OP_LDR,
	CMD_LH = CMD_IMM | OP_LH,
	CMD_LHU = CMD_IMM | OP_LHU,
	CMD_LL = CMD_IMM | OP_LL,
	CMD_LLD = CMD_IMM | OP_LLD,
	CMD_LUI = CMD_IMM | OP_LUI,
	CMD_LW = CMD_IMM | OP_LW,
	CMD_LWL = CMD_IMM | OP_LWL,
	CMD_LWR = CMD_IMM | OP_LWR,
	CMD_LWU = CMD_IMM | OP_LWU,
	CMD_ORI = CMD_IMM | OP_ORI,
	CMD_SB = CMD_IMM | OP_SB,
	CMD_SC = CMD_IMM | OP_SC,
	CMD_SCD = CMD_IMM | OP_SCD,
	CMD_SD = CMD_IMM | OP_SD,
	CMD_SDL = CMD_IMM | OP_SDL,
	CMD_SDR = CMD_IMM | OP_SDR,
	CMD_SH = CMD_IMM | OP_SH,
	CMD_SLTI = CMD_IMM | OP_SLTI,
	CMD_SLTIU = CMD_IMM | OP_SLTIU,
	CMD_SW = CMD_IMM | OP_SW,
	CMD_SWL = CMD_IMM | OP_SWL,
	CMD_SWR = CMD_IMM | OP_SWR,
	CMD_XORI = CMD_IMM | OP_XORI,
	CMD_ADD = CMD_REG | FUNCT_ADD,
	CMD_ADDU = CMD_REG | FUNCT_ADDU,
	CMD_AND = CMD_REG | FUNCT_AND,
	CMD_BREAK = CMD_REG | FUNCT_BREAK,
	CMD_DADD = CMD_REG | FUNCT_DADD,
	CMD_DADDU = CMD_REG | FUNCT_DADDU,
	CMD_DDIV = CMD_REG | FUNCT_DDIV,
	CMD_DDIVU = CMD_REG | FUNCT_DDIVU,
	CMD_DIV = CMD_REG | FUNCT_DIV,
	CMD_DIVU = CMD_REG | FUNCT_DIVU,
	CMD_DMULT = CMD_REG | FUNCT_DMULT,
	CMD_DMULTU = CMD_REG | FUNCT_DMULTU,
	CMD_DSLL = CMD_REG | FUNCT_DSLL,
	CMD_DSLL32 = CMD_REG | FUNCT_DSLL32,
	CMD_DSLLV = CMD_REG | FUNCT_DSLLV,
	CMD_DSRA = CMD_REG | FUNCT_DSRA,
	CMD_DSRA32 = CMD_REG | FUNCT_DSRA32,
	CMD_DSRAV = CMD_REG | FUNCT_DSRAV,
	CMD_DSRL = CMD_REG | FUNCT_DSRL,
	CMD_DSRL32 = CMD_REG | FUNCT_DSRL32,
	CMD_DSRLV = CMD_REG | FUNCT_DSRLV,
	CMD_DSUB = CMD_REG | FUNCT_DSUB,
	CMD_DSUBU = CMD_REG | FUNCT_DSUBU,
	CMD_JALR = CMD_REG | FUNCT_JALR,
	CMD_JR = CMD_REG | FUNCT_JR,
	CMD_MFHI = CMD_REG | FUNCT_MFHI,
	CMD_MFLO = CMD_REG | FUNCT_MFLO,
	CMD_MTHI = CMD_REG | FUNCT_MTHI,
	CMD_MTLO = CMD_REG | FUNCT_MTLO,
	CMD_MULT = CMD_REG | FUNCT_MULT,
	CMD_MULTU = CMD_REG | FUNCT_MULTU,
	CMD_NOR = CMD_REG | FUNCT_NOR,
	CMD_OR = CMD_REG | FUNCT_OR,
	CMD_SLLV = CMD_REG | FUNCT_SLLV,
	CMD_SLT = CMD_REG | FUNCT_SLT,
	CMD_SLTU = CMD_REG | FUNCT_SLTU,
	CMD_SRA = CMD_REG | FUNCT_SRA,
	CMD_SRAV = CMD_REG | FUNCT_SRAV,
	CMD_SRL = CMD_REG | FUNCT_SRL,
	CMD_SRLV = CMD_REG | FUNCT_SRLV,
	CMD_SUB = CMD_REG | FUNCT_SUB,
	CMD_SUBU = CMD_REG | FUNCT_SUBU,
	CMD_SYNC = CMD_REG | FUNCT_SYNC,
	CMD_SYSCALL = CMD_REG | FUNCT_SYSCALL,
	CMD_XOR = CMD_REG | FUNCT_XOR,
	CMD_BGEZ = CMD_REGIMM | FUNCT_IMM_BGEZ,
	CMD_BGEZAL = CMD_REGIMM | FUNCT_IMM_BGEZAL,
	CMD_BGEZALL = CMD_REGIMM | FUNCT_IMM_BGEZALL,
	CMD_BGEZL = CMD_REGIMM | FUNCT_IMM_BGEZL,
	CMD_BLTZAL = CMD_REGIMM | FUNCT_IMM_BLTZAL,
	CMD_BLTZALL = CMD_REGIMM | FUNCT_IMM_BLTZALL,
	CMD_BLTZL = CMD_REGIMM | FUNCT_IMM_BLTZL,
	CMD_MTC0 = CMD_COP0 | COP_MT,
	CMD_MTC1 = CMD_COP1 | COP_MT,
};

enum Register {
	REG_R0,
	REG_AT,
	REG_V0,
	REG_V1,
	REG_A0,
	REG_A1,
	REG_A2,
	REG_A3,
	REG_T0,
	REG_T1,
	REG_T2,
	REG_T3,
	REG_T4,
	REG_T5,
	REG_T6,
	REG_T7,
	REG_S0,
	REG_S1,
	REG_S2,
	REG_S3,
	REG_S4,
	REG_S5,
	REG_S6,
	REG_S7,
	REG_T8,
	REG_T9,
	REG_K0,
	REG_K1,
	REG_GP,
	REG_SP,
	REG_FP,
	REG_RA,

	// A convenience register used for mask printing purposes
	REG_MASK,
};

enum Cop0Registers {
	COP0_CONTEXT0,
	COP0_RANDOM,
	COP0_EntryLo0,
	COP0_EntryLo1,
	COP0_Context4,
	COP0_PageMask,
	COP0_Wired,
	COP0_HWREna,
	COP0_BadVAddr,
	COP0_Count,
	COP0_EntryHi,
	COP0_Compare,
	COP0_Status,
	COP0_Cause,
	COP0_EPC,
	COP0_PRId,
	COP0_Config,
	COP0_LLAddr,
	COP0_WatchLo,
	COP0_WatchHi,

	COP0_Debug = 23,
	COP0_DEPC,
	COP0_Perf,
	COP0_ECC,
	COP0_CacheErr,
	COP0_TagLo,
	COP0_TagHi,
	COP0_ErrorEPC,
	COP0_DESAVE,
};

enum CacheOp {
	CACHE_D = 0b01,
	CACHE_S = 0b10,

	CACHE_IIndexInvalidate = 0b00000,
	CACHE_IIndexLoadTag = 0b00100,
	CACHE_IIndexStoreTag = 0b01000,
	CACHE_IHitInvalidate = 0b10000,
	CACHE_CacheBarrier = 0b10100,
	CACHE_IIndexLoadData = 0b11000,
	CACHE_IIndexStoreData = 0b11100,
};

enum Format {
	FORMAT_IMM = 0b10000000,
	FORMAT_OFF = 0b01000000,
	FORMAT_JUMP = 0b00100000,

	FORMAT_REG_S = 0b00000001,
	FORMAT_REG_T = 0b00000010,
	FORMAT_REG_D = 0b00000100,
	FORMAT_REG_A = 0b00001000,

	FORMAT_COP0_D = 0b100000000,
	FORMAT_CACHE_T = 0b1000000000,

	FORMAT_REG_ST = FORMAT_REG_S | FORMAT_REG_T,
	FORMAT_REG_SD = FORMAT_REG_S | FORMAT_REG_D,
	FORMAT_REG_STD = FORMAT_REG_S | FORMAT_REG_T | FORMAT_REG_D,
	FORMAT_REG_TDA = FORMAT_REG_T | FORMAT_REG_D | FORMAT_REG_A,
	FORMAT_REGIMM_ST = FORMAT_IMM | FORMAT_REG_S | FORMAT_REG_T,
	FORMAT_REGIMM_T = FORMAT_IMM | FORMAT_REG_T,
	FORMAT_REGOFF_S = FORMAT_OFF | FORMAT_REG_S,
	FORMAT_REGOFF_ST = FORMAT_OFF | FORMAT_REG_S | FORMAT_REG_T,
	FORMAT_REG_COP0 = FORMAT_REG_T | FORMAT_COP0_D,
	FORMAT_REGOFF_CACHE = FORMAT_REG_S | FORMAT_CACHE_T | FORMAT_OFF,

	FORMAT_NONE = 0,
};
}
